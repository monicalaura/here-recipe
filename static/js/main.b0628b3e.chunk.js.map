{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","description","className","style","recipe","map","ingredient","text","href","target","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","placeholder","value","onChange","label","url","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,OAAS,yB,gNCoBZC,EAlBA,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YACpD,OACE,yBAAKC,UAAYC,IAAMC,QACvB,4BAAKP,GACL,2BAAG,8CAAH,IAAgCC,GAChC,iDACA,4BACCE,EAAYK,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,UAGpB,+CAA4B,uBAAGC,KAAMP,EAAaQ,OAAQ,UAA9B,QAE1B,yBAAKC,IAAKX,EAAOY,IAAI,OCmDVC,EA9DH,WACV,IADgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OAOYF,mBAAS,IAPrB,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAAS,IARnB,mBAQTK,EARS,KAQFC,EARE,KAYjBC,qBAAU,WACVC,MACE,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAhBd,WAgBc,oBAfb,qCAcE,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAHC,2CAAH,qDAmBf,OACE,yBAAKzB,UAAY,OAChB,wBAAIA,UAAY,WAAhB,yCACD,0BAAMA,UAAY,cAAc0B,SATlB,SAAAC,GACfA,EAAEC,iBACFX,EAASH,GACTC,EAAU,MAOT,2BAAOc,KAAO,OACP7B,UAAY,aACZ8B,YAAc,qBACdC,MAASjB,EACTkB,SAnBW,SAAAL,GACnBZ,EAAUY,EAAEpB,OAAOwB,UAmBlB,4BAAQF,KAAO,SAAS7B,UAAY,iBAApC,WAED,yBAAKA,UAAW,WACdY,EAAQT,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CAAQP,MAAOO,EAAOA,OAAO+B,MACrBrC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAcI,EAAOA,OAAOJ,YAC5BC,YAAcG,EAAOA,OAAOgC,IAC5BC,IAAKjC,EAAOA,OAAO+B,cC9CbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0628b3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2w3Rq\"};","import React from 'react'\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title, calories, image, ingredients, description}) => {\r\n  return(\r\n    <div className ={style.recipe}>\r\n    <h1>{title}</h1>\r\n    <p><strong>Calories: </strong> {calories}</p>\r\n    <strong>Ingredients: </strong>\r\n    <ul>\r\n    {ingredients.map(ingredient =>(\r\n      <li>{ingredient.text}</li>\r\n    ))}\r\n    </ul>\r\n  <strong>Directions:</strong><a href={description} target =\"_blank\">Here</a>\r\n\r\n    <img src={image} alt=\"\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recipe\r\n","import React,{useEffect, useState} from 'react'\nimport './App.css'\nimport Recipe from './Recipe'\n\n\nconst App = () => {\n  const API_ID = '1c15437d'\n  const API_KEY = '7b65e10c7764b6ecec6f6c78adbb5d08'\n\n//STATES\n \n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('')\n\n//USE EFFECT\n \n useEffect(() => {\n getRecipes()\n}, [query] )\n\n const getRecipes = async () => {\n   const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`)\n   const data = await response.json()\n   setRecipes(data.hits)\n\n\n }\n//get the value inputted by user in the search input\n const updateSearch = e => {\n   setSearch(e.target.value)\n }\n\n//get the final query which only runs onSubmit\n const getQuery = e =>{\n   e.preventDefault()\n   setQuery(search)\n   setSearch('')\n }\n\n  return(\n    <div className = \"App\">\n     <h1 className = \"tagline\">Get the recipes you need HERE and NOW</h1>\n    <form className = \"search-form\" onSubmit = {getQuery}>\n    <input type = \"text\"\n           className = \"search-bar\"\n           placeholder = \"Type an ingredient\"\n           value = {search}\n           onChange ={updateSearch}   />\n    <button type = \"submit\" className = \"search-button\">Search</button>\n    </form>\n   <div className =\"recipes\">\n    {recipes.map(recipe => (\n      <Recipe title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients ={recipe.recipe.ingredients}\n              description ={recipe.recipe.url}\n              key={recipe.recipe.label}/> // unique key\n\n    )\n    )}\n    </div>\n\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}